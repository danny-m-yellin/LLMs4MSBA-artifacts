{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red9\green9\blue9;}
{\*\expandedcolortbl;;\csgenericrgb\c3529\c3529\c3529;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 (I) Description of Public library microservices:\
\{\'93Name\'94: \'93Cardholders microservice\'94,\
\'93Description\'94: \'93Responsible for creating, retrieving, updating, and deleting cardholder accounts.  This service also provides the ability to retrieve how much money in fines is owed by a specific cardholder.\'94\
\
\'93Resources\'94: \'93/cardholders, /cardholders/\{id\}, /cardholders/fines/\{id\}.\
An id is of type string.  Each cardholder (/cardholders/\{id\}) consists of a JSON document containing the field names \'91name\'92, \'91email\'92, and \'91id\'92.  The values of each of these is a JSON string.  The resource /cardholders/fines/\{id\} consists of a JSON document with a field \'91fineAmount\'92, whose value is of type float, and a field \'91id\'92, of type string.\'94,\
\
\'93REST requests\'94: \'93GET and POST request on /cardholders.  GET returns a JSON array of all records in the resource.   The GET request may specify a query string of the form \'91field=value\'92.  In this case, only those cardholder records satisfying that constraint should be returned. The POST request provides a JSON document containing the name and email and returns the id for the newly created string record.\
GET, PUT and DELETE requests on /cardholders/\{id\}.   The GET request returns a JSON record of the requested resource.  The PUT request provides a JSON payload of the updated resource\'92s fields and returns the id of the updated resource.  The DELETE request returns the status of the request with no content.\
GET request on cardholders/fines/\{id\}.  The request returns the JSON document representing this resource.\'94,\
\
\'93Additional details\'94: \'93The fine amount owed is computed as follows: at any given day, the fine per overdue book is equal to number-of-days-overdue * FINE_PER_DAY, where FINE_PER_DAY equals $.50.   The cardholder owes the sum of all fines for all books he borrowed.   To compute this amount, this service needs to invoke the Borrows microservice to retrieve information on books borrowed by this cardholder.\'94,\
\
\'93Deployment\'94: \'93The Cardholders microservice runs in a Docker container and listens on external port 5001. Another microservice can send it requests using the URL http://cardholders:5001/cardholders.\'94\
\}\
\
\
\{\'93Name\'94: \'93Books microservice\'94,\
\'93Description\'94: \'93Responsible for creating, retrieving, updating, and deleting books in the library\'92s inventory.\'94,\
\
\'93Resources\'94: \'93/books, /books/\{id\}.\
An id is of type string.  Each book (/books/\{id\}) consists of a JSON document containing the fields \'91title\'92 (a string), \'91authors\'92 (a string), \'91ISBN\'92 (a string representing the 13 digit ISBN_13 number of the book),  \'91publisher\'92 (a string), \'91publishedDate\'92 (a string of the form \'91DD-MM-YYYY\'92),  \'91genre\'92 (a string that is one of \'91Fiction\'92, \'91Children\'92, \'91Biography\'92, \'91Science\'92, \'91Science Fiction\'92, \'91Fantasy\'92, or \'91Other), and \'91id\'92 (a string)\'94,\
\
\'93REST requests\'94: \'93GET and POST request on /books.  GET returns a JSON array of all records in the resource.   The GET request may specify a query string of the form \'91field=value\'92.  In this case, only those book records satisfying that constraint should be returned.  The POST request provides a JSON document containing the title, authors, ISBN, and genre and returns the string id for the newly created book record.\
GET, PUT and DELETE requests on /books/\{id\}.  The GET request returns a JSON record of the requested resource.  The PUT request provides a JSON payload of the resource\'92s fields and returns the id of the updated resource.  The DELETE request returns the status of the request with no content.\'94,\
\
\'93Additional details\'94: \'93The\'91publisher\'92and \'91publishedDate\'92 are not provided in the POST request but is obtained by the service using the 3rd party Google Books API service (see https://developers.google.com/books/docs/v1/using) by supplying the ISBN number of the book.  If Google Books returns more than one entry, the first entry is used. If Google Books does not contain an entry for one of the fields, then that field has the value \'91\'92 (the empty string).\'94,\
\
\'93Deployment\'94: \'93The Books microservice runs in a Docker container and listens on external port 5002.  Another microservice can send it requests using the URL http://books:5002/books.\'94\
\}\
\
\
\{\'93Name\'94: \'93Borrows microservice\'94,\
\'93Description\'94: \'93Responsible for creating, retrieving, updating, and deleting borrow records. A borrow record provides information on a specific book loaned to a cardholder\'94,\
\
\'93Resources\'94: \'93/borrows, /borrows/\{id\}.\
An id is of type string.  Each borrow record (/borrows/\{id\}) consists of a JSON document containing the fields \'91cardholderId\'92 (the id of the cardholder borrowing the book of type string), \'91ISBN\'92 (a string representing the ISBN_13 number of the borrowed book),  \'91loanDate\'92, \'91returnDate\'92 (where loanDate and returnDate are strings of the form \'91DD-MM-YYYY\'92), and \'91id\'92, a string.\'94,\
\
\'93REST requests\'94: \'93GET and POST requests on /borrows.  GET returns a JSON array of all records in the resource.   The GET request may specify a query string of the form \'91field=value\'92.  In this case, only those borrow records satisfying that constraint should be returned.  Alternatively, a GET request on the /borrows resource may specify a query string of the form \'91startDate=date1&endDate=date2\'92.  In this case, only borrow records that have a \'91loanDate\'92 between the specified startDate and endDate should be returned.  An example is the query string \'91startDate=10-12-2023&endDate=01-01-2024\'92. The POST request provides a JSON document containing the id of the cardholder borrowing the book, the ISBN_13 number of the book being borrowed, and the loan date.  It returns the id for the newly created borrow record.\
GET, PUT and DELETE requests on /borrows/\{id\}. The GET request returns a JSON record of the requested resource.  The PUT request provides a JSON payload of the resource\'92s fields and returns the id of the updated resource.  The DELETE request returns the status of the request with no content.\'94,\
\
\'93Additional details\'94: \'93The \'91returnDate\'92 is not provided in the POST request but is computed by the service as follows: returnDate = loanDate + LOAN_PERIOD, where LOAN_PERIOD is 30 days.     A book can only be borrowed by a cardholder who does not have 2 or more books overdue.  If a book cannot be checked out because 2 or more books are overdue, the POST request returns the status code 400.  Each time a book is checked out, the Borrows service informs the Logs service which creates a new log record\'94,\
\
\'93Deployment\'94: \'93The Borrows microservice runs in a Docker container and listens on external port 5003.  Another microservice can send it requests using the URL http://borrows:5003/borrows.\'94\
\}\
\
\
\{\'93Name\'94: \'93Logs microservice\'94,\
\'93Description\'94: \'93Responsible for log records of borrowed books.  Each time a book is checked out, the Borrows service informs the Logs service which creates a new log record.\'94,\
\
\'93Resources\'94: \'93/logs, /logs/\{id\}.\
An id is of type string.  Each log record (/logs/\{id\}) consists of a JSON document containing the fields \'91cardholderId\'92 (the id of a cardholder of type string), \'91borrowId\'92 (the id of a borrow record of type string), \'91ISBN\'92 (a string representing an ISBN_13 number), \'91loanDate\'92 (a string of the form \'91DD-MM-YYYY\'92), and \'91id\'92, a string.\'94,\
\
\'93REST requests\'94: \'93GET and POST request on /logs.  GET returns a JSON array of all records in the resource.   A GET request may specify a query string of the form \'91field=value\'92.  In this case, only those log records satisfying that constraint should be returned. The POST request provides a JSON document containing the cardholderId, the borrowId, the ISBN and the loanDate.  It returns the id for the newly created log record.\
GET request on /logs/\{id\}, returning a JSON record of the requested resource.\'94,\
\
\'93Deployment\'94: \'93The Logs microservice runs in a Docker container and listens on external port 5004.   Another microservice can send it requests using the URL http://logs:5004/logs.\'94\
\}\
\
For all services, each REST request should return a status code in addition to the JSON payload if there is one.\
For successful requests, the appropriate 2XX code is returned:  201 (successful POST), 204 (successful DELETE) and 200 (success on other requests).\
For unsuccessful requests, the appropriate 4XX or 5XX code is returned: 400 (Bad request), 404 (Not Found), 405 (Method Not Allowed), 415 (Unsupported media type), and 500 (Internal Server Error).\
\
(II) Code Generation Guidelines:\
Code Generation Guidelines\
\'95	Each microservice should be written in Python.\
\'95	Besides generating the code, the Python packages that need to be installed must be listed in a comment at the beginning of the code\
\'95	The code must be executable.  Besides comments in the code, no other text in the response.\
\'95	Each microservice should store its persistent data in a Mongo database.   Assume that Mongo is available at 'mongodb://mongo:27017/'.\
\'95	If a microservice requires data that another microservice is responsible for, it invokes a GET request on that microservice to retrieve that data when it needs it.  It does not replicate and store the data locally.\
\'95	The generated code should handle REST API exceptions and return the appropriate REST (HTTP) status code as described above.\
\'95	Assume that each microservice will run in its own Docker container.\
\
\
}